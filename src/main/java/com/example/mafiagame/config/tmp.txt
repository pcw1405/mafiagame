tmp

1. 소켓에 의해 자동으로 생성되는 세션은 일시적으로만 쓰는 것이 좋다
2. 여러기기에서 다중 로그인 할 경우 세션은 구분할 수 있다

3. Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);은 토큰을 검사하기 위한 일종의 공식

4. 일단 간단하게 게임수락부터 이메일로 특정해서 보내본다
   redisTemplate.convertAndSend(channelTopic.getTopic(),chatMessage);
   에서 메시지를 더 추가해서 보낼 수 있도록 해본다 타겟이메일 데이터 추가...

4-1. 일단 게임시작 버튼을 누르면 이메일 모달창이 나타나게 한다

5. 변수가 너무 복잡하니까 더 세분화하여 상황을 나누어서 할 수 도 있다
예를 들어 selectedEmail이 사람마다 계속 바뀌면 헷갈릴 수 있다. 코드가 이해하기에 헷갈릴 수 있다
그리고 애초에 selectEmail 파생 변수를 만들어서 answerTargetEmail로 바꿀 수 도 있지만 일단 해본다.

6.좀 더 간단한 코드가 있다면 찾아본다

  클린코드와 리펙토링 작성법
  -> 의미를 명확히 하고 세분화한다
  -> 긴메서드를 쪼갠다

  단일 책임 원칙(SRP): 클래스나 함수에는 하나의 책임만 있어야 하므로 이해하고 수정하기가 더 쉽습니다.
  개방형/폐쇄형 원칙(OCP): 클래스 또는 모듈은 확장을 위해 열려 있고 수정을 위해 폐쇄되어야 합니다. 기존 기능을 손상시키지 않고 새 기능을 쉽게 추가할 수 있는 모듈식 설계를 장려합니다.
  Liskov 대체 원칙(LSP): 파생 클래스는 프로그램의 정확성에 영향을 주지 않고 기본 클래스를 대체할 수 있어야 하며 일관되고 강력한 시스템을 보장해야 합니다.
  ISP(인터페이스 분리 원칙): 모든 것을 포괄하는 대규모 인터페이스보다는 작고 집중된 인터페이스를 만듭니다. 이는 우려 사항의 분리를 촉진하고 클라이언트에 불필요한 의존성을 강요할 가능성을 줄입니다.
  종속성 역전 원칙(DIP): 상위 수준 모듈은 하위 수준 모듈에 의존해서는 안 됩니다. 대신, 둘 다 추상화에 의존하여 시스템을 보다 유연하게 만들고 변화에 대한 탄력성을 높여야 합니다.

7. 데이터를 어떻게하면 더 빨리 불러오는지 생각해본다

8. 디자인패턴?

9. 기존의 마피아게임보다 장점이 뭐가 있을까? 기존의 마피아는 추리와 스릴이 장점 ,전략...