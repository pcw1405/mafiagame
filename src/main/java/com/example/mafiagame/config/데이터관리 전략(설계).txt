플레이어 데이터

플레이어 ID
이름
역할 (경찰, 마피아, 시민 등)
상태 (생존, 사망)
보유한 아이템 목록
아이템 데이터

아이템 ID
이름 (변장키트, 투표권 등)
효과
게임 상태 데이터

게임 ID
현재 단계 (낮, 밤)
생존한 플레이어 수
마피아 수
투표 데이터

투표 ID
투표한 플레이어 ID
투표 대상 플레이어 ID
능력 사용 데이터

능력 사용 ID
능력 사용 플레이어 ID
능력 사용 대상 플레이어 ID
능력 사용 결과

 데이터베이스 선택
RDBMS (예: MySQL, PostgreSQL): 관계형 데이터베이스는 구조화된 데이터와 복잡한 쿼리에 적합합니다.
플레이어 정보, 아이템

플레이어 정보는 데이터 일관성, 무결성, 영구 저장이 필요하므로
 RDBMS에 저장하는 것이 적합합니다.


NoSQL (예: Redis): 캐싱을 위한 데이터베이스로,
자주 참조하는 데이터(예: 게임 상태,투표)를 캐시하여 빠르게 접근할 수 있습니다.

게임 상태는 빠르게 변하고 자주 조회되는 데이터이므로 NoSQL(예: Redis)에 저장하여
빠른 접근과 성능 향상을 도모할 수 있습니다.


데이터 캐싱
자주 조회되는 데이터(예: 현재 게임 상태, 생존 플레이어 목록 등)를 캐싱하여 데이터베이스
 부하를 줄이고 성능을 향상시킵니다.

@Cacheable 어노테이션을 사용하면 메소드의 결과를 캐시할 수 있습니다.
updateGameState() 메소드에 @CachePut을 사용하여 캐시에 새로운 상태를 강제로 저장할 수 있습니다.

@Cacheable

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

    @Cacheable("currentGameState")
    public Optional<GameState> getCurrentGameState() {
        return gameStateRepository.findById(1L); // Assuming there's only one GameState
    }

    @CachePut("currentGameState")
    public GameState updateGameState(GameState gameState) {
        return gameStateRepository.save(gameState);
    }


    비동기 처리
    게임의 상태 변환, 능력 사용 등의 작업을 비동기적으로 처리하여 응답 시간을 줄입니다.
    게임은 실시간 응답이 중요하다.

    투표 처리: 플레이어가 투표를 진행하면 AJAX를 사용하여 서버에 투표 요청을 보내고,
    서버는 실시간으로 투표 결과를 업데이트합니다.

    게임 상태 업데이트: 게임 진행 중에 서버에서 발생하는 게임 상태 변화(예: 밤과 낮의 변환, 특정 플레이어의 사망 등)를
     AJAX를 통해 실시간으로 클라이언트에 반영합니다.

    플레이어 상호작용: AJAX를 사용하여 플레이어들이 선택한 행동(예: 능력 사용, 메시지 전송 등)을
    실시간으로 처리하고, 다른 플레이어에게 반영합니다.

    react를 쓰는 것이 좋을 수 도 있다 .



