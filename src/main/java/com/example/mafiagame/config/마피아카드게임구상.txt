1.어떤 데이터가 필요한가
-> 어느정도의 데이터량이 필요한가
-> 어떤 데이터가 적합한가 -> 게임데이터니까 속도가 빠른 redis가 필요하다
->

2.어떤 기능이 필요한가 설계

3.예외처리 어떻게 하는지

https://velog.io/@tnals1178/Spring-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-ExceptionHandler
https://velog.io/@wooryung/Spring-Boot-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0
일단 기본적인 것을 배워서 활용


1) 분할과 정복(Divide & Conquer)

규모가 큰 소프트웨어를 여러 개의 작은 서브시스템으로 나누어 하나씩 완성시킨다.

2) 추상화(Abstraction)

실세계의 복잡한 상황을 간결하고 명확하게 핵심 위주로 단순화시킨다.
자세한 구현 전에 상위 레벨에서 제품의 구현을 먼저 생각해보는 것
추상화 기법 ★
과정 추상화 : 자세한 단계를 고려하지 않고 상위 수준에서 수행 흐름만 먼저 설계
데이터 추상화 : 데이터 구조를 대표할 수 있는 표현으로 대체하는 것이다.
제어 추상화 : 여러 명령들을 간단한 표현으로 대체하는 것이다.

1) 상위 설계 - 아키텍처 설계, 데이터 설계, 인터페이스 설계, 사용자 인터페이스 설계
- 아키텍처 설계 : 시스템의 전체적인 구조 설계
- 데이터 설계 : 시스템에 필요한 정보를 설계, 데이터베이스 설계
- 인터페이스 설계 : 시스템의 구조와 서브시스템들 사이의 인터페이스를 명확히 정의
- 사용자 인터페이스 설계 : 사용자가 익숙하고 편리하게 사용하도록 인터페이스 설계

2) 하위 설계 - 모듈 설계, 자료구조 설계, 알고리즘 설계
- 모듈 설계 : 각 모듈의 실제적인 내부를 알고리즘 형태로 표현
- 자료구조 설계 : 자료구조, 변수 등에 대한 상세한 정보를 설계
- 알고리즘 설계 : 업무의 처리 절차 등을 설계