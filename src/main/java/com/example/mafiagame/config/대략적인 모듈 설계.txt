서버: 스프링 부트를 사용하여 백엔드 로직 및 MVC 구조 구현
데이터베이스: MySQL을 사용하여 관계형 데이터베이스 관리, Redis를 사용하여 캐싱
웹 애플리케이션 아키텍처: 서버 사이드 렌더링

인터페이스 설계
스프링 MVC를 사용하여 클라이언트와 서버 간 통신
주요 엔드포인트:
/game/start - 게임 시작
/game/state - 현재 게임 상태 조회
/game/vote - 투표 요청
/game/ability - 능력 사용 요청
사용자 인터페이스 설계
Thymeleaf를 사용하여 서버 사이드 렌더링 구현
하위 설계
모듈 설계
GameController: 게임의 주요 흐름을 제어
PlayerService: 플레이어 관련 로직 처리
ItemService: 아이템 관련 로직 처리
GameStateService: 게임 상태 관리
VoteService: 투표 처리
AbilityService: 능력 사용

자료구조 설계
플레이어, 아이템, 게임 상태 등의 데이터를 저장하고 관리하기 위한 클래스 설계
알고리즘 설계
게임의 주요 로직 (예: 투표 처리, 능력 사용 처리, 게임 상태 변환 등) 구현


